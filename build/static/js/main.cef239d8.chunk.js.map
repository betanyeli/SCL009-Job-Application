{"version":3,"sources":["components/modal.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Modal","handleClose","show","img","showHideClassName","className","style","fontSize","onClick","src","alt","unsplashId","unsplashUrl","Navbar","scrollFunction","state","count","start","setState","fetch","then","res","json","jsonResponse","console","log","imagesResult","concat","showModal","hideModal","query","trackQueryValue","bind","this","event","target","value","keyPressed","results","map","images","urls","thumb","key","id","small","type","onChange","onKeyPress","placeholder","dataLength","length","next","hasMore","loader","textAlign","printImg","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cef239d8.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nconst Modal = ({ handleClose, show, img }) => {\n  const showHideClassName = show ? 'modal display-block' : 'modal display-none';\n\n  return (\n    <div className={showHideClassName}>\n      <div className=\"container-modal\">\n        <section className='modal-main'>\n          <div className=\"button-group\">\n            <i className=\"fas fa-ellipsis-h icon-group\"></i>\n            <button className=\"btn-guardar\"><i className='fas fa-thumbtack' style={{ fontSize: '15px' }}></i>  Guardar</button>\n            <button className=\"btn-enviar\"><i className='fas fa-upload' style={{ fontSize: '15px' }}></i>  Enviar</button>\n\n            <i className=\"fas fa-times\" onClick={handleClose}></i>\n          </div>\n\n\n          <img className=\"img-style\" src={img} alt=\"\" />\n\n        </section>\n      </div>\n\n    </div>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\nimport Modal from './modal'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport '../App.css';\n\nconst unsplashId = '7c567bc4b1005e169e49b8918e1150d58979f65b09e30db07ba0ab4a8a979aa5';\nconst endpoint = 'https://api.unsplash.com/search/photos';\nconst unsplashUrl = 'https://api.unsplash.com/photos'\n\nclass Navbar extends React.Component {\n\n    constructor() {\n        super();\n        this.query = '';\n        this.trackQueryValue = this.trackQueryValue.bind(this);\n        //this.keyPressed = this.keyPressed.bind(this);\n        this.showModal = this.showModal.bind(this);\n        this.hideModal = this.hideModal.bind(this);\n\n        this.state = {\n            imagesResult: [],\n            show: false,\n            img: '',\n            start: 1,\n            count: 20,\n        }\n    }\n\n\n    /*component to init app */\n    componentDidMount() {\n        const { count, start } = this.state;\n        fetch(`${unsplashUrl}?per_page=${count}&client_id=${unsplashId}&start=${start}`)\n            .then(res => {\n                return res.json()\n            }).then(jsonResponse => {\n                console.log(\"JSON\", jsonResponse)\n                this.setState({\n                    imagesResult: jsonResponse\n                })\n            })\n    }\n        /*scroll function not working */\n        scrollFunction =() => {\n            const { count, start } = this.state;\n            this.setState({start: this.state.start + count});\n            fetch(`${unsplashUrl}?per_page=${count}&client_id=${unsplashId}&start=${start}`)\n                .then(res => {\n                    return res.json()\n                }).then(jsonResponse => {\n                    console.log(\"funciona !\", jsonResponse)\n                    this.setState({\n                        imagesResult: this.state.imagesResult.concat(jsonResponse)\n    \n                    })\n    \n                })\n    \n        }\n    /*functions modals*/\n    showModal = (img) => {\n        this.setState({\n            show: true,\n            img: img\n        });\n    };\n\n    hideModal = () => {\n        this.setState({ show: false });\n    };\n    /*search function without button*/\n    // keyPressed(event) {\n    //     if (event.key === \"Enter\") {\n    //         if (this.query === '') {\n    //             fetch(`${endpoint}?query=tech&client_id=${unsplashId}`)\n    //                 .then(res => {\n    //                     return res.json()\n    //                 }).then(jsonResponse => {\n    //                     console.log(\"JSON\", jsonResponse)\n    //                     this.setState({\n    //                         imagesResult: jsonResponse.results\n    //                     })\n    //                 })\n    //         } else {\n    //             fetch(`${endpoint}?query=${this.query}&client_id=${unsplashId}`)\n    //                 .then(res => {\n    //                     return res.json()\n    //                 }).then(jsonResponse => {\n    //                     console.log(\"JSON\", jsonResponse)\n    //                     this.setState({\n    //                         imagesResult: jsonResponse.results\n    //                     })\n    //                 })\n    //         }\n\n    //     }\n    // }\n    /*capture input value*/\n    trackQueryValue(event) {\n        this.query = event.target.value;\n        this.keyPressed(this.query)\n    }\n    keyPressed(query) {\n        fetch(`${endpoint}?query=${query}&per_page=1000&client_id=${unsplashId}`)\n            .then(res => {\n                return res.json()\n            }).then(jsonResponse => {\n                console.log(\"JSON\", jsonResponse)\n                this.setState({\n                    imagesResult: jsonResponse.results\n                })\n            })\n    }\n\n    /*print search img*/\n    printImg() {\n         return (this.state.imagesResult.map(images => {\n            return (\n                <img className=\"img-result\"\n                src={images.urls.thumb}\n                alt=\"\"\n                key={images.id}\n                onClick={() => this.showModal(images.urls.small)} />\n            )\n            \n         \n         \n        })\n         )\n    }\n\n\n\n    render() {\n        \n        return (\n            <>\n                <header>\n\n                    <i className=\"fab fa-pinterest pinterest\"></i>\n                    <div className=\"all-items input-text\">\n                        <i className=\"fas fa-search\"></i>\n                        <input type=\"text\" className=\"input-text\" onChange={this.trackQueryValue} onKeyPress={this.trackQueryValue}\n                            placeholder=\"Buscar\" />\n                    </div>\n\n                    <div className=\"all-items\">\n                        <span className=\"inicio\"><b>Inicio</b></span>\n                        <span className=\"siguiendo\">Siguiendo</span>\n                        <span><i className=\"fab fa-adn\"> </i> Ang </span>\n                        <span><i className=\"fas fa-comment-dots icon-group\"></i></span>\n                        <span><i className=\"fas fa-bell icon-group\"></i></span>\n                        <span><i className=\"fas fa-ellipsis-h icon-group\"></i></span>\n                    </div>\n\n\n                </header>\n\n                \n                <Modal show={this.state.show} img={this.state.img} handleClose={this.hideModal} />\n\n                <InfiniteScroll\n                    dataLength={this.state.imagesResult.length}\n                    next={this.scrollFunction}\n                    hasMore={true}\n                    loader={<h4 style={{ textAlign: \"center\" }}>Loading...</h4>}\n                >\n<div className=\"container-result\">{this.printImg()}</div>\n                </InfiniteScroll> \n\n\n            </>\n        );\n\n    }\n\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/navbar'\n\nclass App extends React.Component {\n\n\n  render(){\n    return (\n      <>\n\n\n    <Navbar />\n\n      </>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}